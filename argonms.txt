It's no secret that OdinMS was a huge memory hog, and required pretty powerful multicore CPUs in order to scale to a thousand concurrent users. I had been working with OdinMS code for quite a while before I realized that there were a lot of high frequency code that could be optimized for speed at a small expense of usability. I spotted places where there were unnecessary bytes written in packets, which were ignored when the MapleStory client parsed everything it needed from the earlier bytes, wasting precious server bandwidth. Rather than fragment the community with a tweaked source that retained the OdinMS name, but had significantly different code, I started the ArgonMS project. I initially wanted to write ArgonMS to set an example of what Java can actually do when written more professionally.

I realized the codebase had to be modular from the start, although the current structure wasn't realized until revisions 45, 46, and 51. This means that you can have four different .jar files that contain only the contents of the packages argonms.common, argonms.center, argonms.game, argonms.login, and argonms.shop, and you only need the .jar containing the argonms.common package with any of the other .jar files to run that one server. Communications between the servers use TCP to allow any of the servers to run on any location of the internet. From the start, I considered having multiple game servers so that some of the more popular channels can have their own servers, while the less popular ones could all be run from the same physical server. This also made it easy to enable more than one MapleStory world per login server.

I may value performance, but above all, I value stability the most. That's why I chose to use Java instead of a language where code could be compiled to native executables. Though Java's exception system may be annoying to handle in code, it is a blessing when it comes to debugging. Essentially, Java programs are always run in what is equivalent to C++'s debugging mode. Rather than crash with no reason at all, the program will always give a stacktrace leading to what went wrong, allowing much easier debugging, facilitating the improvement of stability. The choice of Java also makes it more accessible to others who may learn Java at an educational institution, and allows them to trace and understand or contribute to the source code, making them mature as programmers. I kept this in mind as I specifically wrote the sources to take advantage of object oriented programming and use it correctly, and I worked hard to ensure I used good style throughout. For all it's worth, I myself fluently learned Java while working on OdinMS code, and I want to make sure that those who follow a similar path will be introduced to good style early on.